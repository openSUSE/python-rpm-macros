##### macro definitions for flavor "#FLAVOR#" #####

%#FLAVOR#_shbang_opts     %py_shbang_opts

%__#FLAVOR#               %{_bindir}/%{lua: print((string.gsub("#FLAVOR#", "(%a+%d)(%d+)", "%1.%2")))}

%#FLAVOR#_prefix          #FLAVOR#
%#FLAVOR#_sitelib         %{_python_sysconfig_path %__#FLAVOR# purelib}
%#FLAVOR#_sitearch        %{_python_sysconfig_path %__#FLAVOR# platlib}
%#FLAVOR#_version         %{_python_sysconfig_var  %__#FLAVOR# py_version_short}
%#FLAVOR#_version_nodots  %{_python_sysconfig_var  %__#FLAVOR# py_version_nodot}

%#FLAVOR#_sysconfig_path()  %{_python_sysconfig_path %__#FLAVOR# %1}
%#FLAVOR#_sysconfig_var()   %{_python_sysconfig_var %__#FLAVOR# %1}

%#FLAVOR#_bin_suffix      %{?!_#FLAVOR#_bin_suffix:%#FLAVOR#_version}%{?_#FLAVOR#_bin_suffix}

# Check if there is a major version symlink to our flavor in the current build system. If so, we are the primary provider.
%#FLAVOR#_provides %(provides=""; \
for flavorbin in %{_bindir}/python?; do \
  if [ $flavorbin != %__#FLAVOR# -a $(realpath $flavorbin) = %__#FLAVOR# ]; then \
    provides="$provides $(basename $flavorbin)"; \
  fi; \
done; \
echo ${provides# }; \
)

%if#FLAVOR#      %if "%{python_flavor}" == "#FLAVOR#"

%#FLAVOR#_only() %if "%{python_flavor}" == "#FLAVOR#" \
%** \
%endif

%#FLAVOR#_build \
%{_python_use_flavor #FLAVOR#} \
%__#FLAVOR# %{py_setup} %{?py_setup_args} build \\\
    --executable="%__#FLAVOR# %#FLAVOR#_shbang_opts"

%#FLAVOR#_install \
%{_python_use_flavor #FLAVOR#} \
%__#FLAVOR# %{py_setup} %{?py_setup_args} install \\\
    -O1 --skip-build --force --root %{buildroot} --prefix %{_prefix}

##### PEP517/PEP518 macros #####

%#FLAVOR#_pyproject_wheel(+abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-=) \
%{_python_use_flavor #FLAVOR#} \
myargs="%{**}" \
if [ -f %{_pyproject_anywheeldir}/*-none-any.whl ]; then \
  echo "Already found a compatible wheel in %{_pyproject_anywheeldir}" \
  mkdir -p %{_pyproject_wheeldir} \
  cp %{_pyproject_anywheeldir}/*-none-any.whl %{_pyproject_wheeldir}/ \
else \
  %__#FLAVOR# -mpip wheel %{pyproject_wheel_args} ${myargs:-.}\
  if [ -f %{_pyproject_wheeldir}/*-none-any.whl ]; then \
    mkdir -p %{_pyproject_anywheeldir} \
    cp %{_pyproject_wheeldir}/*-none-any.whl %{_pyproject_anywheeldir}/ \
  fi \
fi

%#FLAVOR#_pyproject_install(+abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-=) \
%{_python_use_flavor #FLAVOR#} \
myargs="%{**}" \
havereq=0 \
if [ -n "${myargs}" ]; then \
  for a in ${myargs}; do \
    pep440req=$(echo $(basename -- ${a}) | sed -E 's/([^-]+)-([^-]+)-.+\\.whl/\\1==\\2/') \
    if [ -f ${a} -a $(basename -- ${a}) != "${pep440req}" ]; then \
      myargs=$(echo ${myargs} | sed "s|${a}|${pep440req}|") \
      mkdir -p %{_pyproject_wheeldir} \
      cp $a %{_pyproject_wheeldir} \
      havereq=1 \
    fi \
  done \
fi \
if [ $havereq -eq 0 ]; then \
  # Fallback for old macro usages which expect a wheel in the current directory \
  ls %{_pyproject_wheeldir}/*.whl || (mkdir -p %{_pyproject_wheeldir}/; cp *.whl %{_pyproject_wheeldir}/) \
  for w in %{_pyproject_wheeldir}/*.whl; do \
    myargs="$myargs $(echo $(basename ${w}) | sed -E 's/([^-]+)-([^-]+)-.+\\.whl/\\1==\\2/')" \
  done \
fi \
%__#FLAVOR# -mpip install %{pyproject_install_args} $myargs \
%python_compileall

# Alternative entries in file section

%#FLAVOR#_alternative() %{_python_macro_init} \
%{lua:local link, name, path = python_alternative_names(rpm.expand("%1"), rpm.expand("%#FLAVOR#_bin_suffix")) \
local libalternatives = rpm.expand("%{with libalternatives}") \
if libalternatives == "1" then \
  if not link:startswith(rpm.expand("%{_mandir}")) then \
    local prio = alternative_prio("#FLAVOR#") \
    print(rpm.expand("%dir %{_datadir}/libalternatives/" .. name .. "\\\n")) \
    print(rpm.expand("%{_datadir}/libalternatives/" .. name .. "/" .. prio .. ".conf\\\n")) \
    print(link .. "\\\n") \
  end \
  print(path .. "\\\n") \
else \
  print(rpm.expand("%ghost %{_sysconfdir}/alternatives/" .. name .. "\\\n")) \
  print(link .. "\\\n") \
  print(path .. "\\\n") \
end \
}

# Commands for RPM scriptlets: These must not be empty even if there is no operation for
# either update-alternatives or libalternatives.

%#FLAVOR#_install_alternative() \# #FLAVOR#_install_alternative: \
%{?!with_libalternatives:%{_python_macro_init}%{lua:python_install_ualternative("#FLAVOR#") \
}}%{?with_libalternatives:\: \# no install scriptlet action for libalternatives}

%#FLAVOR#_uninstall_alternative() \# #FLAVOR#_uninstall_alternative: \
%{?!with_libalternatives:%{uninstall_alternative -n %1 -t %{_bindir}/%1-%{#FLAVOR#_bin_suffix} \
}}%{?with_libalternatives:\: \# no uninstall scriptlet action for libalternatives}

%#FLAVOR#_reset_alternative() \# #FLAVOR#_reset_alternative: \
%{?!with_libalternatives:\: \# reset action only for libalternatives \
}%{?with_libalternatives:%{reset_alternative -n %1 -t %{_bindir}/%1-%{#FLAVOR#_bin_suffix}}}
